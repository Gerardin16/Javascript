1.typeof(x)---tells datatype of x

2.prompt("x")----ask input from a user

3.let -keyword for declaring variabele
let name="Gerardin";

4.let yourname=prompt("What is your name?")----input will be stored in yourname

5.variableName.length()-----gives length of the string

6.The slice() method extracts parts of a string and returns the extracted parts in a new string.
Use the start and end parameters to specify the part of the string you want to extract.
The first character has the position 0, the second has position 1, and so on.
Tip: Use a negative number to select from the end of the string.
var str = "Hello world!";
var res = str.slice(0, 5);
Output ---Hello
Start from position zero and ends before position 5
no.of characters returned=upper bound-lower bound

7.toUpperCase(string)--converts string to uppercase

8.toLowerCase(string)-converts string to lowercase

9.x++--increment ;x-- decrement(applicable for subtraction,multiplication and division)----x+=y,x-=you

10.var x=y++;value of y is assigned to x and y alone is increment---post increment
var x=++y;y is incremented and assigned to both x and y--pre increment\

11.function declaration
function myFunction(parameters list){

body of function
return x;(return output)
}

12.Call function
myFunction(arguements);

13.The Math.floor() function returns the largest integer less than or equal to a given number.
The Math.ceil() function always rounds a number up to the next largest integer.

14.parseInt(inputNumber)--converts string to integer

15.Math.random() returns a random number between 0 (inclusive),  and 1 (exclusive)
always returns a number lower than 1.
Math.random() used with Math.floor() can be used to return random integers.
Math.floor(Math.random() * 10);     // returns a random integer from 0 to 9
Math.floor(Math.random() * 11);      // returns a random integer from 0 to 10

16.== will only compare the value of both the operands. but === will not only check the value of both operands but also checks if both the operands are of same datatype.
So using === operator is preferred by any developer.
!==---not equal to

17.Arrays in javascript
var array_name = [item1, item2, ...]; 
var cars = new Array("Saab", "Volvo", "BMW");another way
The includes() method determines whether an array contains a specified element.
This method returns true if the array contains the element, and false if not.
Add a new item to an array:
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.push("Kiwi");--push elements to the end
fruits.pop()---delete the elements from the end of the array



DOM-Document Object Model
The getElementById Method
The most common way to access an HTML element is to use the id of the element.
The innerHTML property is useful for getting or replacing the content of HTML elements.
The innerHTML property can be used to get or change any HTML element, including <html> and <body>
document.getElementById(id)	Find an element by element id
document.getElementsByTagName(name)	Find elements by tag name--retrurns an array
document.getElementsByClassName(name)	Find elements by class name--retrurns an array

The querySelector() method returns the first element that matches a specified CSS selector(s) in the document.
Note: The querySelector() method only returns the first element that matches the specified selectors. To return all the matches, use the querySelectorAll() method instead.
Note: The querySelector() method only returns the first element that matches the specified selectors. To return all the matches, use the querySelectorAll() method instead.
If the selector matches an ID in document that is used several times (Note that an "id" should be unique within a page and should not be used more than once), it returns the first matching element.


https://www.w3schools.com/jsref/dom_obj_style.asp----dom styles


document.getElementById("myDIV").classList.add("mystyle");
The classList property returns the class name(s) of an element, as a DOMTokenList object.
This property is useful to add, remove and toggle CSS classes on an element.
The classList property is read-only, however, you can modify it by using the add() and remove() methods.
https://www.w3schools.com/jsref/prop_element_classlist.asp


textContent
https://www.w3schools.com/jsref/prop_node_textcontent.asp
innerHTML--returns html elements if mentioned
textContent-only text
innerText-same as textContent but bypasses style and script elements

The getAttribute() method returns the value of the attribute with the specified name, of an element.
https://www.w3schools.com/jsref/met_element_getattribute.asp
https://www.w3schools.com/jsref/prop_node_attributes.asp
The setAttribute() method adds the specified attribute to an element, and gives it the specified value.
If the specified attribute already exists, only the value is set/changed.
https://www.w3schools.com/jsref/met_element_setattribute.asp

Adding Event Listener
document.querySelector("button").addEventListener("click",buttonclick);----adding an event to a button(first parameter-type of event,second parameter-function going to handle the event)
function buttonclick(){
    alert("I got clicked");
}
// Anonymous function 
    // document.querySelectorAll(".drum")[i].addEventListener("click",  function (){
    //     alert("I got clicked");
    // });
higher order functions are functions where functions are sent as parameters

The JavaScript this keyword refers to the object it belongs to.
It has different values depending on where it is used:
In a method, this refers to the owner object.
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.
In an event, this refers to the element that received the event.
Methods like call(), and apply() can refer this to any object.

Objects are variables too. But objects can contain many values.
The values are written as name : value pairs (name and value separated by a colon).
var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};

function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}
 name constructor functions with an upper-case first letter.
Sometimes we need a "blueprint" for creating many objects of the same "type".The way to create an "object type", is to use an object constructor function.
In the example above, function Person() is an object constructor function.Objects of the same type are created by calling the constructor function with the new keyword:
Adding a Property to an Object
myFather.nationality = "English";
Adding method to a constructor
function Person(firstName, lastName, age, eyeColor) {
  this.firstName = firstName; 
  this.lastName = lastName;
  this.age = age;
  this.eyeColor = eyeColor;
  this.changeName = function (name) {
    this.lastName = name;
  };
}


JavaScript Callbacks
A callback is a function passed as an argument to another function.This technique allows a function to call another function.A callback function can run after another function has finished.
function myDisplayer(some) {
  document.getElementById("demo").innerHTML = some;
}
function myCalculator(num1, num2, myCallback) {
  let sum = num1 + num2;
  myCallback(sum);
}
myCalculator(5, 5, myDisplayer);
In the example above, myDisplayer is the name of a function.It is passed to myCalculator() as an argument.When you pass a function as an argument, remember not to use parenthesis.
Right: myCalculator(5, 5, myDisplayer);


The setTimeout() method calls a function or evaluates an expression after a specified number of milliseconds.
Tip: 1000 ms = 1 second.
Tip: The function is only executed once. If you need to repeat execution, use the setInterval() method.
Tip: Use the clearTimeout() method to prevent the function from running.

